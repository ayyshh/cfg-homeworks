Theory 2
Ayesha Osman

1. How does Object Oriented Programming differ from Process Oriented Programming?
Object orientated programming differs from process orientated programming in many ways. OOP language processes classes and objects using a single-interface. With OOP, you can reuse your designs and recycle them, whereas with process orientated programming you cannot. OOP puts emphasis on objects, whereas POP puts emphasis on functions. Process orientated programming will divide your program into multiple functions, but with OOP it will divide the program into multiple objects. You can hide data in OOP but not with POP. OOP is supported by Java, C++ and also python, but POP is supported by Pascal, C, and COBAL. Modifications are quite difficult with POP as they can affect your whole program, but with OOP the objects are independent so modifications are easier. POP doesn’t provide any data security, and also follows a top-down approach, unlike OOP. POP does not have access specifiers, whereas OOP does and has options called Public, private, protected, etc, while also following a bottom up approach.

2. What’s polymorphism in OOP?
In OOP, polymorphism is one of the core concepts of object orientated programming. Poly means many, and morph implies it can take many forms. It describes situations where something occurs in different forms. It is a way you can access different types of objects through the same interface. To find out if your object is polymorphic, you can do a test. These tests can be is-a or instanceof tests. If it passes these tests then it is polymorphic. With polymorphism, a message is sent to multiple class objects. Then each object will respond accordingly to the properties of that class. There are two types of polymorphism in OOP. This includes static binding polymorphism, and dynamic binding polymorphism.

-
Polymorphism
Static binding polymorphism
Dynamic binding polymorphism
Function overloading and Operator overloading
Virtual function
Above is a flow diagram showing the two different types.

Static polymorphism is achieved in OOP that allows the coder to implement different methods. For example, the names can remain the same but the parameters are different. There are certain conditions for static polymorphism, some include; all the parameters should be different and the sequence of parameters can be different.

Dynamic polymorphism is when a single overridden method is solved during a programs runtime. One of the most common examples of dynamic polymorphism is the overriding method.

3. What’s inheritance in OOP?
In Object orientated programming, inheritance provides a mechanism to help establish relationships and build hierarchies of class in object composition. Inheritance is when you use code that was previously created. When you use it you can declare different exceptions and even map a domain model to your database. Inheritance is one of the most important features of OOP. It is aimed to provide users with code re-usability. So instead of writing parts of code multiple times, you can simply inherit properties from one class into another. This helps to save money and time for the coders. Since OOP is made to represent real -world objects, this means inheritance is a way to represent the real-world relationships. For example, a car, van and motorbike can all be classed under a wider category such as ‘Vehicle’. This shows they have inherited the properties of the class, which is Vehicle. In OOP there are five forms of inheritance; single inheritance, multiple inheritance, multi-level inheritance, hierarchical inheritance, and hybrid inheritance. In python you can use this form of syntax to use inheritance:

– class ParentClass:
‘body of parent class’

– class ChildClass( ParentClass ):
‘body of child class’

4. If you had to make a program that could vote for the top three funniest people in the office, how would you do that? How would you make it possible to vote on those people?
Here I am given an array of candidates for an election. i will convert the list of votes into a dictionary. This will be done using the counter(iterator) method. \the key will be the names of people in the office, and the number of votes/counts will be the value. Another dictionary will be created in case some candidates receive the same number of votes. The you can find the 3 highest candidates with the number of votes. Sore them and then print the three winners.
Example code for function to give us the three finniest people in the office:

   `from` `collections` `import` `Counter
   `def` `funniest_person(``input``):`
 `votes` `=` `Counter(``input``)`
 `dict` `=` `{}`
 `for` `(key,value)` `in` `votes.items():`
 `dict``[value].append(key)`
 `highestVote` `=` `sorted``(``dict``.keys(),reverse``=``True``)[``0``]`
`if` `len``(``dict``[maxVote])>``1``:`
`print` `(``sorted``(``dict``[maxVote])[``0``])`
`else``:`
`print` `(``dict``[maxVote][``0``])`
  `if` `__name__` `=``=` `"__main__"``:`
 `input` `=``[``'emily'``,``'rose'``,``'john'``,``'jack'``,`
`'rachel'``]
 `highestVote(``input``)`
5. What’s the software development cycle?
The software development life cycle is a process which is used by companies for building software. It ensures quality and consistency of the software while its being built. SDLC gives a framework for a set of activities and deliverables. There are many phases of this cycle. They include: analysis of requirements, planning, design of software, development of software, testing and deployment. The aim of the development cycle is to produce high quality software at a low cost and in a minimal time frame. It involves 6 phases as mentioned above, and includes models such as the waterfall model and agile model. The beginning of the plan is aimed to evaluate existing systems and find any deficiencies in them. It then clarifies the requirements for the new system, and goes through phases of analysis, planning, testing, etc… A strong focus is put onto the testing phase, as you need to ensure the quality of the product.

6. What’s the difference between agile and waterfall?
Waterfall	Agile
Waterfall does not have a process for making changes to the project requirements once the development has started	Agile allows you to make changes in project/software development
The testing phases come after the Build phase in the development	Focuses on testing throughout the process of software development
Waterfall uses a sequential design process	Agile follows an incremental approach
Waterfall is a more structured methodology in software development	Agile is used and know for its flexibility with software development
A linear sequential life cycle of software development	A continuous iteration of both testing and development
Waterfall is easier to manage due to it’s linear nature	-Agile is client focused and ensure clients are involved throughout the development cycle
Waterfall is a faster way of delivering a project	Agile may be a more lengthy process as it allows change and focuses to maintain quality in a project
Waterfall works better for smaller sized projects	Agile works well for all sized projects, including those of a larger scope
7. What is a reduced function used for?
A reduced function is used to apply a function passed in an argument to all the list elements that are mentioned in the sequence passed along. The module for this is ‘functools’ module. Two elements in a sequence are picked and a result is obtained. Then it applies the same function to the previous result and the result is stored again. The process carries on until no more elements are left. A final result will then be returned and printed in the console. The reduce function can also be combined with operator functions to get similar functionality and to make the code more readable. reduce() will store the immediate result and give you a final summation value. reduce(fun,seq) will take the function first and the sequence as the second argument. In summary, the reduce() function can accept a sequence and a function and return it as a single calculated value.

8. How does merge sort work
Merge sort is one of the sorting algorithms in python, which aims to break down a list into sub-lists until every sub list has maximum one element. It merges all the sub lists in reverse order which gets sorted sub lists, to a single sorted list. Its efficient and is the best sorting algorithm overall and it has the worst case time complexity, of O(nlogn). With merge sort, you are given an unsorted list of ‘n’ numbers. These are divided into sub lists multiple times, until each sub list has only one element. Once this has been divided into n sub lists of one element, it will merge the sub lists to get sorted sub lists. It will finally then give you a sorted sub list.
Below is an example started code using merge sort:

def merge_sort(unsorted_list):  
if len(unsorted_list) >1:  
    middle = len(unsorted_list) // 2  
    right = unsorted_list[middle:]  
    left = unsorted_list[:middle]  

    merge_sort(right)  
    merge_sort(left)
9. Generators - Generator functions allow you to declare a function that behaves like an iterator, i.e. it can be used in a for loop. What is the use case?
Generators can return a function that can make a sequence. They can allow you to declare a function that behaves like an iterator. Generators are useful as they can enable you to programmatically construct a sequence. In python iterator is an object that is used to iterate over iterable objects. Some examples of these include tuples and dictionaries. You can initialise the iterator object with the iter() method. The next() method can be used for iteration. In generator functions, a yield statement is used instead of a return one. For example, below is a simple code showing a generator function.

def our_generator():
    print('Item one')
    yield 1

    print('Item 2')
    yield 2

    print('Item 3')
    yield 3
One use case for generators is if you have large quantities of data which you need to process incrementally, and you need to avoid reading it into memory all at once. Since a generator is a type of iterator, generator functions using yield are particularly useful. You can pass control and pass data onto different functions, without the need for a return. Another use for it is it can be seen as a form of multitasking. When generator functions can be used in for loops, it helps your program efficiently scale. Generator functions can also provide good encapsulation patterns. Another use case if if you have to fetch a large number of records from a directory. You can use function generators to yield one item at a time, rather than holding entire records of data at once.

Whenever a generator yields a statement, it pauses the function and the control is passed onto the caller. Another use case of generators can be to help improve memory.

10. Decorators - A page for useful (or potentially abusive? decorator ideas. What is the return type of the decorator?
Decorators can be very useful and powerful tools in python. They allow your program to modify the behaviour of a class or function. They can enable the user to wrap another function to extend the behaviour of the function that is wrapped. Decorators are taken as the argument in a function and called in the wrapped function. Below is an example code of how you can create s decorator?

 def  eg_decorator(func):

 def  my_wrap():

 print("dec Function")

return  func()

return my_wrap
Some return types for decorators can include:

Argument validation error - where the type of argument to a function is incorrect
Invalid argument number error - This is when the number of arguments given to a function is wrong
Invalid return type - This is when the return value is the wrong type
These will come with custom error messages, so the data can be passed onto the constructor method: init()

Example code for invalid return type:

 class InvalidReturnType(ValueError):
‘’’

This is when the return value is the wrong type

‘’’

 def  __init__(self, return_type, func_name):

 self.error = 'Invalid return type'.format(return_type,

 func_name)

 def  __str__(self):

 return self.error
Some examples of useful decorator ideas:

Just in time compilation (JIT). Compilation happens whenever you write a code, and with JIT you can do most of this at execution. So the python can interpreter can work at two things at once and save you time.

Do twice. The do twice decorator can run a function twice with just once call. It can be helpful when debugging. It can also be used to measure performance for two different iterations. Below is an example code:

  from decorators import    do_twice  
   @do_twice  
 def timerfunc():  
%timeit factorial(5)
Count calls. This decorator can give you information on how many times a function is used in a software. It can be used for debugging. You add it to a function and you will get an output telling you how many times a function has been ran.

 from decorators import   count_calls  
 @count_calls  
 def function_example():  
  print("Welcome")
  function_example()  
Although decorators can be very useful and help with debugging and saving time, they can also potentially be abusive.
